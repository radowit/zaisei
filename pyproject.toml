# POETRY

[tool.poetry]
name = "zaisei"
version = "0.1.0"
description = "Finance manager"
authors = ["Rados≈Çaw Ganczarek <radoslaw@ganczarek.in>"]
license = "BSD 3-Clause License"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
argon2-cffi = "~23.1.0"
crispy-bootstrap5 = "~2023.10"
django-compressor = "~4.4.0"
django-environ = "~0.11.2"
django-model-utils = "~4.3.1"
django-redis = "~5.4.0"
django = "~5.0.0"
hiredis = "~2.3.0"
pillow = "~10.1.0"
python-slugify = "~8.0.1"
whitenoise = "~6.6.0"
psycopg = { extras = ["c"], version = "^3.1.14" }

[tool.poetry.group.dev.dependencies]
black = "^24.0.0"
django-coverage-plugin = "^3.1.0"
django-debug-toolbar = "^4.2.0"
django-extensions = "^3.2.3"
django-stubs = { version = "^4.2.7", extras = ["compatible-mypy"] }
djlint = "^1.34.0"
factory-boy = "^3.3.0"
ipdb = "^0.13.13"
mypy = "^1.7.1"
pre-commit = "^3.5.0"
pylint-django = "^2.5.5"
pytest-django = "^4.7.0"
pytest-sugar = "^0.9.7"
pytest = "^7.4.3"
werkzeug = { version = "^3.0.1", extras = ["watchdog"] }
ruff = "^0.1.7"
pytest-cov = "^4.1.0"


[tool.poetry.group.production.dependencies]
django-anymail = "10.2"
gunicorn = "21.2.0"
psycopg = { version = "3.1.16", extras = ["c"] }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db"
python_files = ["tests.py", "test_*.py"]

# ==== Coverage ====
[tool.coverage.run]
source = ["zaisei", "tests", "merge_production_dotenvs_in_dotenv.py"]
omit = ["*/migrations/*", "*/templates/*"]
plugins = ["django_coverage_plugin"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true

# BLACK
[tool.black]
line-length = 88
target-version = ['py312']


# ==== isort ====
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["zaisei", "config"]
skip = ["venv/"]
skip_glob = ["**/migrations/*.py"]


# MYPY
[tool.mypy]
check_untyped_defs = true
color_output = true
disallow_any_decorated = true
disallow_any_explicit = false
disallow_any_expr = false
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = ["tests", "zaisei/.*/tests/.*"]
plugins = ["mypy_django_plugin.main"]
pretty = true
python_version = "3.12"
show_column_numbers = true
show_error_context = true
extra_checks = true
strict_equality = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"


# ==== PyLint ====
[tool.pylint.MASTER]
load-plugins = ["pylint_django"]
django-settings-module = "config.settings.local"

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint."MESSAGES CONTROL"]
disable = ["missing-docstring", "invalid-name"]

[tool.pylint.DESIGN]
max-parents = 13

[tool.pylint.TYPECHECK]
generated-members = [
    "REQUEST",
    "acl_users",
    "aq_parent",
    "[a-zA-Z]+_set{1,2}",
    "save",
    "delete",
]


# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 88
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2


# RUFF

[tool.ruff]
line-length = 88
preview = true
target-version = "py312"
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "COM",    # flake8-commas
    "CPY",    # flake8-copyright
    "D",      # pydocstyle
    "I",      # isort
]
select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "E",     # Error
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRIO",  # flake8-trio
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # Warning
    "YTT",   # flake8-2020

]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ARG001",  # Unused function argument
    "ANN",     # flake8-annotations
    "S",       # flake8-bandit
    "PLR6301", # Method could be a function, class method, or static method
]
"zaisei/*/migrations/*" = [
    "ANN",    # flake8-annotations
    "E501",   # Line too long
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "SLF001", # Private member accessed
    "F841",   # Local variable is assigned to but never used
]
"manage.py" = [
    "F401",   # imported but unused
    "B904",   # Use `raise from` to specify exception cause
    "TRY200", # Use `raise from` to specify exception cause
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM101",  # Exception must not use a string literal, assign to variable first
]
